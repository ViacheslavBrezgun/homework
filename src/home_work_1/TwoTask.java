/*2. Изучить приоритетность операторов по таблице в презентации. Сначала посчитать результаты всех ниже приведённых
примеров устно, а потом проверить в IDE (в случае ошибок свериться с таблицей приоритетов, повторять просчёт примеров
 до полного соответствия). Результатом МОЖЕТ БЫТЬ ОШИБКА компиляции, МОЖЕТ БЫТЬ ОШИБКА выполнения программы или
 корректный результат. Все значения в этих переменных должны быть записаны в int и boolean переменные. Напротив
 каждой строчки нужно написать комментарий с результатом и объяснением почему вы получили такой результат.
	2.0 ВНИМАНИЕ --8 значит что вам нужно создать переменную, например а, и проинициализировать её 8, а дальше
	её использовать как --а. Данная переменная во всех выражениях должна равняться 8;
	2.1 5 + 2 / 8
	2.2 (5 + 2) / 8
	2.3 (5 + 2++) / 8
	2.4 (5 + 2++) / --8
	2.5 (5 * 2 >> 2++) / --8
	2.6 (5 + 7 > 20 ? 68 : 22 * 2 >> 2++) / --8
	2.7 (5 + 7 > 20 ? 68 >= 68 : 22 * 2 >> 2++) / --8
	2.8 6 - 2 > 3 && 12 * 12 <= 119
	2.9 true && false
*/
package home_work_1;

public class TwoTask {
    public static void main(String[] args) {
        int a = 8;
        int b = 2;

        // 2.1. 5 + 2 / 8
        System.out.println(5 + b / a);//5, т.к. тип результата - int, результат деления 5/a неявно будет приведен к целому типу

        //2.2 (5 + 2) / 8
        System.out.println((5 + b) / a);// 0 так как переменная int

        //2.3 (5 + 2++) / 8
        System.out.println((5 + b++) / a);// 0 так как int

        //2.4 (5 + 2++) / --8
        System.out.println((5 + b++) / --a);//1 (5+3)/7=1.14285714

        //2.5 (5 * 2 >> 2++) / --8
        System.out.println((5 * 2 >> b++) / --a);//0 (5*2>>4)/6 = 0/6 = 0

        //2.6 (5 + 7 > 20 ? 68 : 22 * 2 >> 2++) / --8
        System.out.println((5 + 7 > 20 ? 68 : 22 * 2 >> b++) / --a);//0 (44>>5)/6=1/6=0

        //2.7 (5 + 7 > 20 ? 68 >= 68 : 22 * 2 >> 2++) / --8
        //System.out.println((5 + 7 > 20 ? 68 >= 68 : 22 * 2 >> b++) / --a);
        //ощибка компиляции , в тернарном операторе не должно быть логического выражения

        //2.8 6 - 2 > 3 && 12 * 12 <= 119
        System.out.println(6 - 2 > 3 && 12 * 12 <= 119);// false - т.к. оба операнда не являются истинными. Левый операнд true, правый false

        //2.9 true && false
        System.out.println(true && false);// false - т.к. оба операнда не являются истинными


    }
}

